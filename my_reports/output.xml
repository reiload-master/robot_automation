<?xml version="1.0" encoding="UTF-8"?>
<robot generator="Robot 3.2.2 (Python 3.9.0 on win32)" generated="20210309 23:12:56.830" rpa="false">
<suite id="s1" name="Robot Automation Ui" source="C:\GitHub\robot_automation_ui">
<suite id="s1-s1" name="Features" source="C:\GitHub\robot_automation_ui\features">
<suite id="s1-s1-s1" name="Specifications" source="C:\GitHub\robot_automation_ui\features\specifications">
<suite id="s1-s1-s1-s1" name="Api Application" source="C:\GitHub\robot_automation_ui\features\specifications\api_application">
<suite id="s1-s1-s1-s1-s1" name="Weather Steps Spec" source="C:\GitHub\robot_automation_ui\features\specifications\api_application\weather_steps_spec.robot">
<test id="s1-s1-s1-s1-s1-t1" name="Checking the weather by city">
<kw name="Given I start the session" library="weather_spec">
<kw name="Create Session" library="RequestsLibrary">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>${SESSION}</arg>
<arg>${HOST_BASE}</arg>
<arg>headers=${HEADER}</arg>
<arg>disable_warnings=True</arg>
</arguments>
<msg timestamp="20210309 23:12:57.027" level="INFO">Creating Session using : alias=weather, url=http://api.openweathermap.org/data/2.5, headers={'Content-Type': 'application/json'},                     cookies={}, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<msg timestamp="20210309 23:12:57.027" level="DEBUG">Creating session: weather</msg>
<status status="PASS" starttime="20210309 23:12:57.027" endtime="20210309 23:12:57.028"></status>
</kw>
<status status="PASS" starttime="20210309 23:12:57.027" endtime="20210309 23:12:57.028"></status>
</kw>
<kw name="When send a request about the city weather" library="weather_spec">
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>q=${city}</arg>
<arg>appid=${API_KEY}</arg>
</arguments>
<assign>
<var>&amp;{params}</var>
</assign>
<msg timestamp="20210309 23:12:57.028" level="INFO">&amp;{params} = { q=São Paulo | appid=e2f1d841cc16cff49a0aa18b531d71e0 }</msg>
<status status="PASS" starttime="20210309 23:12:57.028" endtime="20210309 23:12:57.028"></status>
</kw>
<kw name="Get On Session" library="RequestsLibrary">
<doc>Sends a GET request on a previously created HTTP Session.</doc>
<arguments>
<arg>${SESSION}</arg>
<arg>${WEATHER_ENDPOINT}</arg>
<arg>params=${params}</arg>
<arg>headers=${HEADER}</arg>
</arguments>
<assign>
<var>${RESPONSE}</var>
</assign>
<msg timestamp="20210309 23:12:57.481" level="INFO">GET Request : url=http://api.openweathermap.org/data/2.5/weather?q=S%C3%A3o+Paulo&amp;appid=e2f1d841cc16cff49a0aa18b531d71e0 
 path_url=/data/2.5/weather?q=S%C3%A3o+Paulo&amp;appid=e2f1d841cc16cff49a0aa18b531d71e0 
 headers={'User-Agent': 'python-requests/2.25.1', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive', 'Content-Type': 'application/json'} 
 body=None 
 </msg>
<msg timestamp="20210309 23:12:57.481" level="INFO">GET Response : url=http://api.openweathermap.org/data/2.5/weather?q=S%C3%A3o+Paulo&amp;appid=e2f1d841cc16cff49a0aa18b531d71e0 
 status=200, reason=OK 
 headers={'Server': 'openresty', 'Date': 'Wed, 10 Mar 2021 02:12:57 GMT', 'Content-Type': 'application/json; charset=utf-8', 'Content-Length': '481', 'Connection': 'keep-alive', 'X-Cache-Key': '/data/2.5/weather?q=s%c3%a3o+paulo', 'Access-Control-Allow-Origin': '*', 'Access-Control-Allow-Credentials': 'true', 'Access-Control-Allow-Methods': 'GET, POST'} 
 body={"coord":{"lon":-46.6361,"lat":-23.5475},"weather":[{"id":803,"main":"Clouds","description":"broken clouds","icon":"04n"}],"base":"stations","main":{"temp":292.19,"feels_like":291.68,"temp_min":291.15,"temp_max":293.15,"pressure":1014,"humidity":73},"visibility":10000,"wind":{"speed":2.57,"deg":110},"clouds":{"all":75},"dt":1615341993,"sys":{"type":1,"id":8394,"country":"BR","sunrise":1615280753,"sunset":1615325304},"timezone":-10800,"id":3448439,"name":"São Paulo","cod":200} 
 </msg>
<msg timestamp="20210309 23:12:57.481" level="INFO">${RESPONSE} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20210309 23:12:57.028" endtime="20210309 23:12:57.481"></status>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${RESPONSE}</arg>
</arguments>
<msg timestamp="20210309 23:12:57.481" level="INFO">${RESPONSE} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20210309 23:12:57.481" endtime="20210309 23:12:57.481"></status>
</kw>
<status status="PASS" starttime="20210309 23:12:57.028" endtime="20210309 23:12:57.481"></status>
</kw>
<kw name="Then validating the Response's success data" library="weather_spec">
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Response: ${RESPONSE.text}</arg>
</arguments>
<msg timestamp="20210309 23:12:57.482" level="INFO">Response: {"coord":{"lon":-46.6361,"lat":-23.5475},"weather":[{"id":803,"main":"Clouds","description":"broken clouds","icon":"04n"}],"base":"stations","main":{"temp":292.19,"feels_like":291.68,"temp_min":291.15,"temp_max":293.15,"pressure":1014,"humidity":73},"visibility":10000,"wind":{"speed":2.57,"deg":110},"clouds":{"all":75},"dt":1615341993,"sys":{"type":1,"id":8394,"country":"BR","sunrise":1615280753,"sunset":1615325304},"timezone":-10800,"id":3448439,"name":"São Paulo","cod":200}</msg>
<status status="PASS" starttime="20210309 23:12:57.482" endtime="20210309 23:12:57.482"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Response: ${RESPONSE.text}</arg>
</arguments>
<status status="PASS" starttime="20210309 23:12:57.482" endtime="20210309 23:12:57.482"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${RESPONSE.json()}</arg>
</arguments>
<msg timestamp="20210309 23:12:57.483" level="INFO">Length is 13</msg>
<status status="PASS" starttime="20210309 23:12:57.483" endtime="20210309 23:12:57.483"></status>
</kw>
<kw name="Dictionary Should Contain Item" library="Collections">
<doc>An item of ``key`` / ``value`` must be found in a ``dictionary``.</doc>
<arguments>
<arg>${RESPONSE.json()["sys"]}</arg>
<arg>country</arg>
<arg>${COUNTRY}</arg>
</arguments>
<status status="PASS" starttime="20210309 23:12:57.483" endtime="20210309 23:12:57.483"></status>
</kw>
<kw name="Dictionary Should Contain Item" library="Collections">
<doc>An item of ``key`` / ``value`` must be found in a ``dictionary``.</doc>
<arguments>
<arg>${RESPONSE.json()}</arg>
<arg>coord</arg>
<arg>${COORDINATES}</arg>
</arguments>
<status status="PASS" starttime="20210309 23:12:57.483" endtime="20210309 23:12:57.483"></status>
</kw>
<kw name="Dictionary Should Contain Item" library="Collections">
<doc>An item of ``key`` / ``value`` must be found in a ``dictionary``.</doc>
<arguments>
<arg>${RESPONSE.json()}</arg>
<arg>name</arg>
<arg>${CITY}</arg>
</arguments>
<status status="PASS" starttime="20210309 23:12:57.483" endtime="20210309 23:12:57.484"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${RESPONSE.status_code}</arg>
<arg>${STATUS_ESPERADO}</arg>
</arguments>
<msg timestamp="20210309 23:12:57.484" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20210309 23:12:57.484" endtime="20210309 23:12:57.484"></status>
</kw>
<status status="PASS" starttime="20210309 23:12:57.482" endtime="20210309 23:12:57.484"></status>
</kw>
<tags>
<tag>api_tests</tag>
<tag>weather_by_city</tag>
</tags>
<status status="PASS" starttime="20210309 23:12:57.026" endtime="20210309 23:12:57.484" critical="yes"></status>
</test>
<test id="s1-s1-s1-s1-s1-t2" name="Checking the weather by id">
<kw name="Given I start the session" library="weather_spec">
<kw name="Create Session" library="RequestsLibrary">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>${SESSION}</arg>
<arg>${HOST_BASE}</arg>
<arg>headers=${HEADER}</arg>
<arg>disable_warnings=True</arg>
</arguments>
<msg timestamp="20210309 23:12:57.485" level="INFO">Creating Session using : alias=weather, url=http://api.openweathermap.org/data/2.5, headers={'Content-Type': 'application/json'},                     cookies={}, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<msg timestamp="20210309 23:12:57.486" level="DEBUG">Creating session: weather</msg>
<status status="PASS" starttime="20210309 23:12:57.485" endtime="20210309 23:12:57.486"></status>
</kw>
<status status="PASS" starttime="20210309 23:12:57.485" endtime="20210309 23:12:57.486"></status>
</kw>
<kw name="When send a request about the city weather by id" library="weather_spec">
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>id=${ID_CITY}</arg>
<arg>appid=${API_KEY}</arg>
</arguments>
<assign>
<var>&amp;{params}</var>
</assign>
<msg timestamp="20210309 23:12:57.486" level="INFO">&amp;{params} = { id=3448439 | appid=e2f1d841cc16cff49a0aa18b531d71e0 }</msg>
<status status="PASS" starttime="20210309 23:12:57.486" endtime="20210309 23:12:57.486"></status>
</kw>
<kw name="Get On Session" library="RequestsLibrary">
<doc>Sends a GET request on a previously created HTTP Session.</doc>
<arguments>
<arg>${SESSION}</arg>
<arg>${WEATHER_ENDPOINT}</arg>
<arg>params=${params}</arg>
<arg>headers=${HEADER}</arg>
</arguments>
<assign>
<var>${RESPONSE}</var>
</assign>
<msg timestamp="20210309 23:12:57.931" level="INFO">GET Request : url=http://api.openweathermap.org/data/2.5/weather?id=3448439&amp;appid=e2f1d841cc16cff49a0aa18b531d71e0 
 path_url=/data/2.5/weather?id=3448439&amp;appid=e2f1d841cc16cff49a0aa18b531d71e0 
 headers={'User-Agent': 'python-requests/2.25.1', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive', 'Content-Type': 'application/json'} 
 body=None 
 </msg>
<msg timestamp="20210309 23:12:57.931" level="INFO">GET Response : url=http://api.openweathermap.org/data/2.5/weather?id=3448439&amp;appid=e2f1d841cc16cff49a0aa18b531d71e0 
 status=200, reason=OK 
 headers={'Server': 'openresty', 'Date': 'Wed, 10 Mar 2021 02:12:57 GMT', 'Content-Type': 'application/json; charset=utf-8', 'Content-Length': '481', 'Connection': 'keep-alive', 'X-Cache-Key': '/data/2.5/weather?id=3448439', 'Access-Control-Allow-Origin': '*', 'Access-Control-Allow-Credentials': 'true', 'Access-Control-Allow-Methods': 'GET, POST'} 
 body={"coord":{"lon":-46.6361,"lat":-23.5475},"weather":[{"id":803,"main":"Clouds","description":"broken clouds","icon":"04n"}],"base":"stations","main":{"temp":292.19,"feels_like":291.68,"temp_min":291.15,"temp_max":293.15,"pressure":1014,"humidity":73},"visibility":10000,"wind":{"speed":2.57,"deg":110},"clouds":{"all":75},"dt":1615342174,"sys":{"type":1,"id":8394,"country":"BR","sunrise":1615280753,"sunset":1615325304},"timezone":-10800,"id":3448439,"name":"São Paulo","cod":200} 
 </msg>
<msg timestamp="20210309 23:12:57.931" level="INFO">${RESPONSE} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20210309 23:12:57.486" endtime="20210309 23:12:57.931"></status>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${RESPONSE}</arg>
</arguments>
<msg timestamp="20210309 23:12:57.932" level="INFO">${RESPONSE} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20210309 23:12:57.931" endtime="20210309 23:12:57.932"></status>
</kw>
<status status="PASS" starttime="20210309 23:12:57.486" endtime="20210309 23:12:57.932"></status>
</kw>
<kw name="Then validating the Response's success data" library="weather_spec">
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Response: ${RESPONSE.text}</arg>
</arguments>
<msg timestamp="20210309 23:12:57.933" level="INFO">Response: {"coord":{"lon":-46.6361,"lat":-23.5475},"weather":[{"id":803,"main":"Clouds","description":"broken clouds","icon":"04n"}],"base":"stations","main":{"temp":292.19,"feels_like":291.68,"temp_min":291.15,"temp_max":293.15,"pressure":1014,"humidity":73},"visibility":10000,"wind":{"speed":2.57,"deg":110},"clouds":{"all":75},"dt":1615342174,"sys":{"type":1,"id":8394,"country":"BR","sunrise":1615280753,"sunset":1615325304},"timezone":-10800,"id":3448439,"name":"São Paulo","cod":200}</msg>
<status status="PASS" starttime="20210309 23:12:57.932" endtime="20210309 23:12:57.933"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Response: ${RESPONSE.text}</arg>
</arguments>
<status status="PASS" starttime="20210309 23:12:57.933" endtime="20210309 23:12:57.933"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${RESPONSE.json()}</arg>
</arguments>
<msg timestamp="20210309 23:12:57.933" level="INFO">Length is 13</msg>
<status status="PASS" starttime="20210309 23:12:57.933" endtime="20210309 23:12:57.933"></status>
</kw>
<kw name="Dictionary Should Contain Item" library="Collections">
<doc>An item of ``key`` / ``value`` must be found in a ``dictionary``.</doc>
<arguments>
<arg>${RESPONSE.json()["sys"]}</arg>
<arg>country</arg>
<arg>${COUNTRY}</arg>
</arguments>
<status status="PASS" starttime="20210309 23:12:57.933" endtime="20210309 23:12:57.934"></status>
</kw>
<kw name="Dictionary Should Contain Item" library="Collections">
<doc>An item of ``key`` / ``value`` must be found in a ``dictionary``.</doc>
<arguments>
<arg>${RESPONSE.json()}</arg>
<arg>coord</arg>
<arg>${COORDINATES}</arg>
</arguments>
<status status="PASS" starttime="20210309 23:12:57.934" endtime="20210309 23:12:57.934"></status>
</kw>
<kw name="Dictionary Should Contain Item" library="Collections">
<doc>An item of ``key`` / ``value`` must be found in a ``dictionary``.</doc>
<arguments>
<arg>${RESPONSE.json()}</arg>
<arg>name</arg>
<arg>${CITY}</arg>
</arguments>
<status status="PASS" starttime="20210309 23:12:57.934" endtime="20210309 23:12:57.934"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${RESPONSE.status_code}</arg>
<arg>${STATUS_ESPERADO}</arg>
</arguments>
<msg timestamp="20210309 23:12:57.934" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20210309 23:12:57.934" endtime="20210309 23:12:57.934"></status>
</kw>
<status status="PASS" starttime="20210309 23:12:57.932" endtime="20210309 23:12:57.934"></status>
</kw>
<tags>
<tag>api_tests</tag>
<tag>weather_by_id</tag>
</tags>
<status status="PASS" starttime="20210309 23:12:57.485" endtime="20210309 23:12:57.935" critical="yes"></status>
</test>
<test id="s1-s1-s1-s1-s1-t3" name="Checking weather by longitude and latitude">
<kw name="Given I start the session" library="weather_spec">
<kw name="Create Session" library="RequestsLibrary">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>${SESSION}</arg>
<arg>${HOST_BASE}</arg>
<arg>headers=${HEADER}</arg>
<arg>disable_warnings=True</arg>
</arguments>
<msg timestamp="20210309 23:12:57.936" level="INFO">Creating Session using : alias=weather, url=http://api.openweathermap.org/data/2.5, headers={'Content-Type': 'application/json'},                     cookies={}, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<msg timestamp="20210309 23:12:57.936" level="DEBUG">Creating session: weather</msg>
<status status="PASS" starttime="20210309 23:12:57.936" endtime="20210309 23:12:57.936"></status>
</kw>
<status status="PASS" starttime="20210309 23:12:57.935" endtime="20210309 23:12:57.936"></status>
</kw>
<kw name="When send a request about weather by longitude and latitude" library="weather_spec">
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>lat=${LATITUDE}</arg>
<arg>lon=${LONGITUDE}</arg>
<arg>appid=${API_KEY}</arg>
</arguments>
<assign>
<var>&amp;{params}</var>
</assign>
<msg timestamp="20210309 23:12:57.937" level="INFO">&amp;{params} = { lat=-23.5475 | lon=-46.6361 | appid=e2f1d841cc16cff49a0aa18b531d71e0 }</msg>
<status status="PASS" starttime="20210309 23:12:57.937" endtime="20210309 23:12:57.937"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Parameters: {params}</arg>
</arguments>
<msg timestamp="20210309 23:12:57.937" level="INFO">Parameters: {params}</msg>
<status status="PASS" starttime="20210309 23:12:57.937" endtime="20210309 23:12:57.937"></status>
</kw>
<kw name="Get On Session" library="RequestsLibrary">
<doc>Sends a GET request on a previously created HTTP Session.</doc>
<arguments>
<arg>${SESSION}</arg>
<arg>${WEATHER_ENDPOINT}</arg>
<arg>params=${params}</arg>
<arg>headers=${HEADER}</arg>
</arguments>
<assign>
<var>${RESPONSE}</var>
</assign>
<msg timestamp="20210309 23:12:58.368" level="INFO">GET Request : url=http://api.openweathermap.org/data/2.5/weather?lat=-23.5475&amp;lon=-46.6361&amp;appid=e2f1d841cc16cff49a0aa18b531d71e0 
 path_url=/data/2.5/weather?lat=-23.5475&amp;lon=-46.6361&amp;appid=e2f1d841cc16cff49a0aa18b531d71e0 
 headers={'User-Agent': 'python-requests/2.25.1', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive', 'Content-Type': 'application/json'} 
 body=None 
 </msg>
<msg timestamp="20210309 23:12:58.368" level="INFO">GET Response : url=http://api.openweathermap.org/data/2.5/weather?lat=-23.5475&amp;lon=-46.6361&amp;appid=e2f1d841cc16cff49a0aa18b531d71e0 
 status=200, reason=OK 
 headers={'Server': 'openresty', 'Date': 'Wed, 10 Mar 2021 02:12:58 GMT', 'Content-Type': 'application/json; charset=utf-8', 'Content-Length': '481', 'Connection': 'keep-alive', 'X-Cache-Key': '/data/2.5/weather?lat=-23.55&amp;lon=-46.64', 'Access-Control-Allow-Origin': '*', 'Access-Control-Allow-Credentials': 'true', 'Access-Control-Allow-Methods': 'GET, POST'} 
 body={"coord":{"lon":-46.6361,"lat":-23.5475},"weather":[{"id":803,"main":"Clouds","description":"broken clouds","icon":"04n"}],"base":"stations","main":{"temp":292.19,"feels_like":291.68,"temp_min":291.15,"temp_max":293.15,"pressure":1014,"humidity":73},"visibility":10000,"wind":{"speed":2.57,"deg":110},"clouds":{"all":75},"dt":1615342139,"sys":{"type":1,"id":8394,"country":"BR","sunrise":1615280753,"sunset":1615325304},"timezone":-10800,"id":3448439,"name":"São Paulo","cod":200} 
 </msg>
<msg timestamp="20210309 23:12:58.368" level="INFO">${RESPONSE} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20210309 23:12:57.937" endtime="20210309 23:12:58.368"></status>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${RESPONSE}</arg>
</arguments>
<msg timestamp="20210309 23:12:58.368" level="INFO">${RESPONSE} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20210309 23:12:58.368" endtime="20210309 23:12:58.368"></status>
</kw>
<status status="PASS" starttime="20210309 23:12:57.936" endtime="20210309 23:12:58.369"></status>
</kw>
<kw name="Then validating the Response's success data" library="weather_spec">
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Response: ${RESPONSE.text}</arg>
</arguments>
<msg timestamp="20210309 23:12:58.369" level="INFO">Response: {"coord":{"lon":-46.6361,"lat":-23.5475},"weather":[{"id":803,"main":"Clouds","description":"broken clouds","icon":"04n"}],"base":"stations","main":{"temp":292.19,"feels_like":291.68,"temp_min":291.15,"temp_max":293.15,"pressure":1014,"humidity":73},"visibility":10000,"wind":{"speed":2.57,"deg":110},"clouds":{"all":75},"dt":1615342139,"sys":{"type":1,"id":8394,"country":"BR","sunrise":1615280753,"sunset":1615325304},"timezone":-10800,"id":3448439,"name":"São Paulo","cod":200}</msg>
<status status="PASS" starttime="20210309 23:12:58.369" endtime="20210309 23:12:58.369"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Response: ${RESPONSE.text}</arg>
</arguments>
<status status="PASS" starttime="20210309 23:12:58.369" endtime="20210309 23:12:58.369"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${RESPONSE.json()}</arg>
</arguments>
<msg timestamp="20210309 23:12:58.370" level="INFO">Length is 13</msg>
<status status="PASS" starttime="20210309 23:12:58.370" endtime="20210309 23:12:58.370"></status>
</kw>
<kw name="Dictionary Should Contain Item" library="Collections">
<doc>An item of ``key`` / ``value`` must be found in a ``dictionary``.</doc>
<arguments>
<arg>${RESPONSE.json()["sys"]}</arg>
<arg>country</arg>
<arg>${COUNTRY}</arg>
</arguments>
<status status="PASS" starttime="20210309 23:12:58.370" endtime="20210309 23:12:58.370"></status>
</kw>
<kw name="Dictionary Should Contain Item" library="Collections">
<doc>An item of ``key`` / ``value`` must be found in a ``dictionary``.</doc>
<arguments>
<arg>${RESPONSE.json()}</arg>
<arg>coord</arg>
<arg>${COORDINATES}</arg>
</arguments>
<status status="PASS" starttime="20210309 23:12:58.370" endtime="20210309 23:12:58.370"></status>
</kw>
<kw name="Dictionary Should Contain Item" library="Collections">
<doc>An item of ``key`` / ``value`` must be found in a ``dictionary``.</doc>
<arguments>
<arg>${RESPONSE.json()}</arg>
<arg>name</arg>
<arg>${CITY}</arg>
</arguments>
<status status="PASS" starttime="20210309 23:12:58.370" endtime="20210309 23:12:58.371"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${RESPONSE.status_code}</arg>
<arg>${STATUS_ESPERADO}</arg>
</arguments>
<msg timestamp="20210309 23:12:58.371" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20210309 23:12:58.371" endtime="20210309 23:12:58.371"></status>
</kw>
<status status="PASS" starttime="20210309 23:12:58.369" endtime="20210309 23:12:58.371"></status>
</kw>
<tags>
<tag>api_tests</tag>
<tag>weather_long_lati</tag>
</tags>
<status status="PASS" starttime="20210309 23:12:57.935" endtime="20210309 23:12:58.371" critical="yes"></status>
</test>
<test id="s1-s1-s1-s1-s1-t4" name="Checking weather by zip code">
<kw name="Given I start the session" library="weather_spec">
<kw name="Create Session" library="RequestsLibrary">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>${SESSION}</arg>
<arg>${HOST_BASE}</arg>
<arg>headers=${HEADER}</arg>
<arg>disable_warnings=True</arg>
</arguments>
<msg timestamp="20210309 23:12:58.372" level="INFO">Creating Session using : alias=weather, url=http://api.openweathermap.org/data/2.5, headers={'Content-Type': 'application/json'},                     cookies={}, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<msg timestamp="20210309 23:12:58.372" level="DEBUG">Creating session: weather</msg>
<status status="PASS" starttime="20210309 23:12:58.372" endtime="20210309 23:12:58.373"></status>
</kw>
<status status="PASS" starttime="20210309 23:12:58.372" endtime="20210309 23:12:58.373"></status>
</kw>
<kw name="When send a request about weather by zip code us" library="weather_spec">
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>zip=${ZIP_CODE_US}</arg>
<arg>appid=${API_KEY}</arg>
</arguments>
<assign>
<var>&amp;{params}</var>
</assign>
<msg timestamp="20210309 23:12:58.373" level="INFO">&amp;{params} = { zip=94040,us | appid=e2f1d841cc16cff49a0aa18b531d71e0 }</msg>
<status status="PASS" starttime="20210309 23:12:58.373" endtime="20210309 23:12:58.373"></status>
</kw>
<kw name="Get On Session" library="RequestsLibrary">
<doc>Sends a GET request on a previously created HTTP Session.</doc>
<arguments>
<arg>${SESSION}</arg>
<arg>${WEATHER_ENDPOINT}</arg>
<arg>params=${params}</arg>
<arg>headers=${HEADER}</arg>
</arguments>
<assign>
<var>${RESPONSE}</var>
</assign>
<msg timestamp="20210309 23:12:58.795" level="INFO">GET Request : url=http://api.openweathermap.org/data/2.5/weather?zip=94040%2Cus&amp;appid=e2f1d841cc16cff49a0aa18b531d71e0 
 path_url=/data/2.5/weather?zip=94040%2Cus&amp;appid=e2f1d841cc16cff49a0aa18b531d71e0 
 headers={'User-Agent': 'python-requests/2.25.1', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive', 'Content-Type': 'application/json'} 
 body=None 
 </msg>
<msg timestamp="20210309 23:12:58.795" level="INFO">GET Response : url=http://api.openweathermap.org/data/2.5/weather?zip=94040%2Cus&amp;appid=e2f1d841cc16cff49a0aa18b531d71e0 
 status=200, reason=OK 
 headers={'Server': 'openresty', 'Date': 'Wed, 10 Mar 2021 02:12:58 GMT', 'Content-Type': 'application/json; charset=utf-8', 'Content-Length': '494', 'Connection': 'keep-alive', 'X-Cache-Key': '/data/2.5/weather?zip=94040%2cus', 'Access-Control-Allow-Origin': '*', 'Access-Control-Allow-Credentials': 'true', 'Access-Control-Allow-Methods': 'GET, POST'} 
 body={"coord":{"lon":-122.088,"lat":37.3855},"weather":[{"id":501,"main":"Rain","description":"moderate rain","icon":"10d"}],"base":"stations","main":{"temp":283.52,"feels_like":277.61,"temp_min":281.48,"temp_max":285.15,"pressure":1017,"humidity":58},"visibility":10000,"wind":{"speed":6.17,"deg":210},"rain":{"1h":1.69},"clouds":{"all":75},"dt":1615342030,"sys":{"type":1,"id":5122,"country":"US","sunrise":1615300069,"sunset":1615342198},"timezone":-28800,"id":0,"name":"Mountain View","cod":200} 
 </msg>
<msg timestamp="20210309 23:12:58.795" level="INFO">${RESPONSE} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20210309 23:12:58.373" endtime="20210309 23:12:58.795"></status>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${RESPONSE}</arg>
</arguments>
<msg timestamp="20210309 23:12:58.795" level="INFO">${RESPONSE} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20210309 23:12:58.795" endtime="20210309 23:12:58.795"></status>
</kw>
<status status="PASS" starttime="20210309 23:12:58.373" endtime="20210309 23:12:58.795"></status>
</kw>
<kw name="Then expect API response will be code" library="weather_spec">
<arguments>
<arg>200</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Response: ${RESPONSE.text}</arg>
</arguments>
<msg timestamp="20210309 23:12:58.797" level="INFO">Response: {"coord":{"lon":-122.088,"lat":37.3855},"weather":[{"id":501,"main":"Rain","description":"moderate rain","icon":"10d"}],"base":"stations","main":{"temp":283.52,"feels_like":277.61,"temp_min":281.48,"temp_max":285.15,"pressure":1017,"humidity":58},"visibility":10000,"wind":{"speed":6.17,"deg":210},"rain":{"1h":1.69},"clouds":{"all":75},"dt":1615342030,"sys":{"type":1,"id":5122,"country":"US","sunrise":1615300069,"sunset":1615342198},"timezone":-28800,"id":0,"name":"Mountain View","cod":200}</msg>
<status status="PASS" starttime="20210309 23:12:58.796" endtime="20210309 23:12:58.797"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Response: ${RESPONSE.text}</arg>
</arguments>
<status status="PASS" starttime="20210309 23:12:58.797" endtime="20210309 23:12:58.797"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${RESPONSE.status_code}</arg>
<arg>${STATUS_CODE}</arg>
</arguments>
<msg timestamp="20210309 23:12:58.797" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20210309 23:12:58.797" endtime="20210309 23:12:58.797"></status>
</kw>
<status status="PASS" starttime="20210309 23:12:58.796" endtime="20210309 23:12:58.797"></status>
</kw>
<tags>
<tag>api_tests</tag>
<tag>weather_zipcod</tag>
</tags>
<status status="PASS" starttime="20210309 23:12:58.372" endtime="20210309 23:12:58.797" critical="yes"></status>
</test>
<test id="s1-s1-s1-s1-s1-t5" name="Checking cities within a rectangle zone">
<kw name="Given I start the session" library="weather_spec">
<kw name="Create Session" library="RequestsLibrary">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>${SESSION}</arg>
<arg>${HOST_BASE}</arg>
<arg>headers=${HEADER}</arg>
<arg>disable_warnings=True</arg>
</arguments>
<msg timestamp="20210309 23:12:58.799" level="INFO">Creating Session using : alias=weather, url=http://api.openweathermap.org/data/2.5, headers={'Content-Type': 'application/json'},                     cookies={}, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<msg timestamp="20210309 23:12:58.799" level="DEBUG">Creating session: weather</msg>
<status status="PASS" starttime="20210309 23:12:58.799" endtime="20210309 23:12:58.799"></status>
</kw>
<status status="PASS" starttime="20210309 23:12:58.798" endtime="20210309 23:12:58.799"></status>
</kw>
<kw name="When send a request about cities within a rectangle zone" library="weather_spec">
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>bbox=${BBOX}</arg>
<arg>appid=${API_KEY}</arg>
</arguments>
<assign>
<var>&amp;{params}</var>
</assign>
<msg timestamp="20210309 23:12:58.800" level="INFO">&amp;{params} = { bbox=12,32,15,37,10 | appid=e2f1d841cc16cff49a0aa18b531d71e0 }</msg>
<status status="PASS" starttime="20210309 23:12:58.799" endtime="20210309 23:12:58.800"></status>
</kw>
<kw name="Get On Session" library="RequestsLibrary">
<doc>Sends a GET request on a previously created HTTP Session.</doc>
<arguments>
<arg>${SESSION}</arg>
<arg>${CITY_ENDPOINT}</arg>
<arg>params=${params}</arg>
<arg>headers=${HEADER}</arg>
</arguments>
<assign>
<var>${RESPONSE}</var>
</assign>
<msg timestamp="20210309 23:12:59.232" level="INFO">GET Request : url=http://api.openweathermap.org/data/2.5/box/city?bbox=12%2C32%2C15%2C37%2C10&amp;appid=e2f1d841cc16cff49a0aa18b531d71e0 
 path_url=/data/2.5/box/city?bbox=12%2C32%2C15%2C37%2C10&amp;appid=e2f1d841cc16cff49a0aa18b531d71e0 
 headers={'User-Agent': 'python-requests/2.25.1', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive', 'Content-Type': 'application/json'} 
 body=None 
 </msg>
<msg timestamp="20210309 23:12:59.232" level="INFO">GET Response : url=http://api.openweathermap.org/data/2.5/box/city?bbox=12%2C32%2C15%2C37%2C10&amp;appid=e2f1d841cc16cff49a0aa18b531d71e0 
 status=200, reason=OK 
 headers={'Server': 'openresty', 'Date': 'Wed, 10 Mar 2021 02:12:59 GMT', 'Content-Type': 'application/json; charset=utf-8', 'Content-Length': '5839', 'Connection': 'keep-alive', 'X-Cache-Key': '/data/2.5/box/city?bbox=12%2C32%2C15%2C37%2C10', 'Access-Control-Allow-Origin': '*', 'Access-Control-Allow-Credentials': 'true', 'Access-Control-Allow-Methods': 'GET, POST'} 
 body={"cod":200,"calctime":0.00294143,"cnt":15,"list":[{"id":2563191,"dt":1615338565,"name":"Birkirkara","coord":{"Lon":14.4611,"Lat":35.8972},"main":{"temp":12.71,"feels_like":11.82,"temp_min":12.22,"temp_max":13,"pressure":1014,"humidity":94},"visibility":10000,"wind":{"speed":2.06,"deg":230},"rain":null,"snow":null,"clouds":{"today":75},"weather":[{"id":803,"main":"Clouds","description":"broken clouds","icon":"04n"}]},{"id":2210247,"dt":1615338563,"name":"Tripoli","coord":{"Lon":13.1875,"Lat":32.8752},"main":{"temp":14.81,"feels_like":13.25,"temp_min":14.81,"temp_max":14.81,"pressure":1014,"sea_level":1014,"grnd_level":1011,"humidity":80},"visibility":10000,"wind":{"speed":2.86,"deg":102},"rain":null,"snow":null,"clouds":{"today":0},"weather":[{"id":800,"main":"Clear","description":"clear sky","icon":"01n"}]},{"id":2216885,"dt":1615338563,"name":"Zawiya","coord":{"Lon":12.7278,"Lat":32.7522},"main":{"temp":14.79,"feels_like":12.61,"temp_min":14.79,"temp_max":14.79,"pressure":1014,"sea_level":1014,"grnd_level":1011,"humidity":73},"visibility":10000,"wind":{"speed":3.18,"deg":98},"rain":null,"snow":null,"clouds":{"today":0},"weather":[{"id":800,"main":"Clear","description":"clear sky","icon":"01n"}]},{"id":2212771,"dt":1615338563,"name":"Şabrātah","coord":{"Lon":12.4885,"Lat":32.7933},"main":{"temp":14.68,"feels_like":12.51,"temp_min":14.68,"temp_max":14.68,"pressure":1014,"sea_level":1014,"grnd_level":1012,"humidity":72},"visibility":10000,"wind":{"speed":3.04,"deg":103},"rain":null,"snow":null,"clouds":{"today":0},"weather":[{"id":800,"main":"Clear","description":"clear sky","icon":"01n"}]},{"id":2215163,"dt":1615338563,"name":"Masallātah","coord":{"Lon":14,"Lat":32.6167},"main":{"temp":12.61,"feels_like":11.76,"temp_min":12.61,"temp_max":12.61,"pressure":1014,"sea_level":1014,"grnd_level":986,"humidity":91},"visibility":10000,"wind":{"speed":1.75,"deg":110},"rain":null,"snow":null,"clouds":{"today":0},"weather":[{"id":800,"main":"Clear","description":"clear sky","icon":"01n"}]},{"id":2219905,"dt":1615338563,"name":"Al Khums","coord":{"Lon":14.2619,"Lat":32.6486},"main":{"temp":14.56,"feels_like":13.77,"temp_min":14.56,"temp_max":14.56,"pressure":1014,"sea_level":1014,"grnd_level":1011,"humidity":83},"visibility":10000,"wind":{"speed":1.88,"deg":88},"rain":null,"snow":null,"clouds":{"today":0},"weather":[{"id":800,"main":"Clear","description":"clear sky","icon":"01n"}]},{"id":2208425,"dt":1615338563,"name":"Zuwārah","coord":{"Lon":12.082,"Lat":32.9312},"main":{"temp":14.96,"feels_like":12.76,"temp_min":14.96,"temp_max":14.96,"pressure":1014,"sea_level":1014,"grnd_level":1013,"humidity":79},"visibility":10000,"wind":{"speed":3.75,"deg":112},"rain":null,"snow":null,"clouds":{"today":0},"weather":[{"id":800,"main":"Clear","description":"clear sky","icon":"01n"}]},{"id":2210221,"dt":1615338563,"name":"Tarhuna","coord":{"Lon":13.6332,"Lat":32.435},"main":{"temp":10.91,"feels_like":9.46,"temp_min":10.91,"temp_max":10.91,"pressure":1014,"sea_level":1014,"grnd_level":968,"humidity":90},"visibility":10000,"wind":{"speed":1.89,"deg":132},"rain":null,"snow":null,"clouds":{"today":0},"weather":[{"id":800,"main":"Clear","description":"clear sky","icon":"01n"}]},{"id":2208485,"dt":1615338563,"name":"Zliten","coord":{"Lon":14.5687,"Lat":32.4674},"main":{"temp":14.65,"feels_like":13.76,"temp_min":14.65,"temp_max":14.65,"pressure":1014,"sea_level":1014,"grnd_level":1012,"humidity":84},"visibility":10000,"wind":{"speed":2.15,"deg":59},"rain":null,"snow":null,"clouds":{"today":0},"weather":[{"id":800,"main":"Clear","description":"clear sky","icon":"01n"}]},{"id":2217362,"dt":1615338563,"name":"Gharyan","coord":{"Lon":13.0203,"Lat":32.1722},"main":{"temp":11.04,"feels_like":9.45,"temp_min":11.04,"temp_max":11.04,"pressure":1014,"sea_level":1014,"grnd_level":933,"humidity":81},"visibility":10000,"wind":{"speed":1.57,"deg":143},"rain":null,"snow":null,"clouds":{"today":0},"weather":[{"id":800,"main":"Clear","description":"clear sky","icon":"01n"}]},{"id":2523693,"dt":1615338518,"name":"Pozzallo","coord":{"Lon":14.8499,"Lat":36.7305},"main":{"temp":11,"feels_like":9.94,"temp_min":11,"temp_max":11,"pressure":1013,"humidity":93},"visibility":10000,"wind":{"speed":1.54,"deg":170},"rain":null,"snow":null,"clouds":{"today":75},"weather":[{"id":803,"main":"Clouds","description":"broken clouds","icon":"04n"}]},{"id":2524119,"dt":1615338518,"name":"Modica","coord":{"Lon":14.774,"Lat":36.8459},"main":{"temp":11,"feels_like":9.94,"temp_min":11,"temp_max":11,"pressure":1013,"humidity":93},"visibility":10000,"wind":{"speed":1.54,"deg":170},"rain":null,"snow":null,"clouds":{"today":75},"weather":[{"id":803,"main":"Clouds","description":"broken clouds","icon":"04n"}]},{"id":2208791,"dt":1615338563,"name":"Yafran","coord":{"Lon":12.5286,"Lat":32.0633},"main":{"temp":11.32,"feels_like":9.92,"temp_min":11.32,"temp_max":11.32,"pressure":1014,"sea_level":1014,"grnd_level":935,"humidity":81},"visibility":10000,"wind":{"speed":1.39,"deg":138},"rain":null,"snow":null,"clouds":{"today":0},"weather":[{"id":800,"main":"Clear","description":"clear sky","icon":"01n"}]},{"id":2523581,"dt":1615338518,"name":"Rosolini","coord":{"Lon":14.9478,"Lat":36.8242},"main":{"temp":11,"feels_like":9.94,"temp_min":11,"temp_max":11,"pressure":1013,"humidity":93},"visibility":10000,"wind":{"speed":1.54,"deg":170},"rain":null,"snow":null,"clouds":{"today":75},"weather":[{"id":803,"main":"Clouds","description":"broken clouds","icon":"04n"}]},{"id":2523650,"dt":1615338519,"name":"Ragusa","coord":{"Lon":14.7172,"Lat":36.9282},"main":{"temp":11,"feels_like":9.94,"temp_min":11,"temp_max":11,"pressure":1013,"humidity":93},"visibility":10000,"wind":{"speed":1.54,"deg":170},"rain":null,"snow":null,"clouds":{"today":75},"weather":[{"id":803,"main":"Clouds","description":"broken clouds","icon":"04n"}]}]} 
 </msg>
<msg timestamp="20210309 23:12:59.233" level="INFO">${RESPONSE} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20210309 23:12:58.800" endtime="20210309 23:12:59.233"></status>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${RESPONSE}</arg>
</arguments>
<msg timestamp="20210309 23:12:59.233" level="INFO">${RESPONSE} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20210309 23:12:59.233" endtime="20210309 23:12:59.233"></status>
</kw>
<status status="PASS" starttime="20210309 23:12:58.799" endtime="20210309 23:12:59.233"></status>
</kw>
<kw name="Then expect API response will be code" library="weather_spec">
<arguments>
<arg>200</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Response: ${RESPONSE.text}</arg>
</arguments>
<msg timestamp="20210309 23:12:59.234" level="INFO">Response: {"cod":200,"calctime":0.00294143,"cnt":15,"list":[{"id":2563191,"dt":1615338565,"name":"Birkirkara","coord":{"Lon":14.4611,"Lat":35.8972},"main":{"temp":12.71,"feels_like":11.82,"temp_min":12.22,"temp_max":13,"pressure":1014,"humidity":94},"visibility":10000,"wind":{"speed":2.06,"deg":230},"rain":null,"snow":null,"clouds":{"today":75},"weather":[{"id":803,"main":"Clouds","description":"broken clouds","icon":"04n"}]},{"id":2210247,"dt":1615338563,"name":"Tripoli","coord":{"Lon":13.1875,"Lat":32.8752},"main":{"temp":14.81,"feels_like":13.25,"temp_min":14.81,"temp_max":14.81,"pressure":1014,"sea_level":1014,"grnd_level":1011,"humidity":80},"visibility":10000,"wind":{"speed":2.86,"deg":102},"rain":null,"snow":null,"clouds":{"today":0},"weather":[{"id":800,"main":"Clear","description":"clear sky","icon":"01n"}]},{"id":2216885,"dt":1615338563,"name":"Zawiya","coord":{"Lon":12.7278,"Lat":32.7522},"main":{"temp":14.79,"feels_like":12.61,"temp_min":14.79,"temp_max":14.79,"pressure":1014,"sea_level":1014,"grnd_level":1011,"humidity":73},"visibility":10000,"wind":{"speed":3.18,"deg":98},"rain":null,"snow":null,"clouds":{"today":0},"weather":[{"id":800,"main":"Clear","description":"clear sky","icon":"01n"}]},{"id":2212771,"dt":1615338563,"name":"Şabrātah","coord":{"Lon":12.4885,"Lat":32.7933},"main":{"temp":14.68,"feels_like":12.51,"temp_min":14.68,"temp_max":14.68,"pressure":1014,"sea_level":1014,"grnd_level":1012,"humidity":72},"visibility":10000,"wind":{"speed":3.04,"deg":103},"rain":null,"snow":null,"clouds":{"today":0},"weather":[{"id":800,"main":"Clear","description":"clear sky","icon":"01n"}]},{"id":2215163,"dt":1615338563,"name":"Masallātah","coord":{"Lon":14,"Lat":32.6167},"main":{"temp":12.61,"feels_like":11.76,"temp_min":12.61,"temp_max":12.61,"pressure":1014,"sea_level":1014,"grnd_level":986,"humidity":91},"visibility":10000,"wind":{"speed":1.75,"deg":110},"rain":null,"snow":null,"clouds":{"today":0},"weather":[{"id":800,"main":"Clear","description":"clear sky","icon":"01n"}]},{"id":2219905,"dt":1615338563,"name":"Al Khums","coord":{"Lon":14.2619,"Lat":32.6486},"main":{"temp":14.56,"feels_like":13.77,"temp_min":14.56,"temp_max":14.56,"pressure":1014,"sea_level":1014,"grnd_level":1011,"humidity":83},"visibility":10000,"wind":{"speed":1.88,"deg":88},"rain":null,"snow":null,"clouds":{"today":0},"weather":[{"id":800,"main":"Clear","description":"clear sky","icon":"01n"}]},{"id":2208425,"dt":1615338563,"name":"Zuwārah","coord":{"Lon":12.082,"Lat":32.9312},"main":{"temp":14.96,"feels_like":12.76,"temp_min":14.96,"temp_max":14.96,"pressure":1014,"sea_level":1014,"grnd_level":1013,"humidity":79},"visibility":10000,"wind":{"speed":3.75,"deg":112},"rain":null,"snow":null,"clouds":{"today":0},"weather":[{"id":800,"main":"Clear","description":"clear sky","icon":"01n"}]},{"id":2210221,"dt":1615338563,"name":"Tarhuna","coord":{"Lon":13.6332,"Lat":32.435},"main":{"temp":10.91,"feels_like":9.46,"temp_min":10.91,"temp_max":10.91,"pressure":1014,"sea_level":1014,"grnd_level":968,"humidity":90},"visibility":10000,"wind":{"speed":1.89,"deg":132},"rain":null,"snow":null,"clouds":{"today":0},"weather":[{"id":800,"main":"Clear","description":"clear sky","icon":"01n"}]},{"id":2208485,"dt":1615338563,"name":"Zliten","coord":{"Lon":14.5687,"Lat":32.4674},"main":{"temp":14.65,"feels_like":13.76,"temp_min":14.65,"temp_max":14.65,"pressure":1014,"sea_level":1014,"grnd_level":1012,"humidity":84},"visibility":10000,"wind":{"speed":2.15,"deg":59},"rain":null,"snow":null,"clouds":{"today":0},"weather":[{"id":800,"main":"Clear","description":"clear sky","icon":"01n"}]},{"id":2217362,"dt":1615338563,"name":"Gharyan","coord":{"Lon":13.0203,"Lat":32.1722},"main":{"temp":11.04,"feels_like":9.45,"temp_min":11.04,"temp_max":11.04,"pressure":1014,"sea_level":1014,"grnd_level":933,"humidity":81},"visibility":10000,"wind":{"speed":1.57,"deg":143},"rain":null,"snow":null,"clouds":{"today":0},"weather":[{"id":800,"main":"Clear","description":"clear sky","icon":"01n"}]},{"id":2523693,"dt":1615338518,"name":"Pozzallo","coord":{"Lon":14.8499,"Lat":36.7305},"main":{"temp":11,"feels_like":9.94,"temp_min":11,"temp_max":11,"pressure":1013,"humidity":93},"visibility":10000,"wind":{"speed":1.54,"deg":170},"rain":null,"snow":null,"clouds":{"today":75},"weather":[{"id":803,"main":"Clouds","description":"broken clouds","icon":"04n"}]},{"id":2524119,"dt":1615338518,"name":"Modica","coord":{"Lon":14.774,"Lat":36.8459},"main":{"temp":11,"feels_like":9.94,"temp_min":11,"temp_max":11,"pressure":1013,"humidity":93},"visibility":10000,"wind":{"speed":1.54,"deg":170},"rain":null,"snow":null,"clouds":{"today":75},"weather":[{"id":803,"main":"Clouds","description":"broken clouds","icon":"04n"}]},{"id":2208791,"dt":1615338563,"name":"Yafran","coord":{"Lon":12.5286,"Lat":32.0633},"main":{"temp":11.32,"feels_like":9.92,"temp_min":11.32,"temp_max":11.32,"pressure":1014,"sea_level":1014,"grnd_level":935,"humidity":81},"visibility":10000,"wind":{"speed":1.39,"deg":138},"rain":null,"snow":null,"clouds":{"today":0},"weather":[{"id":800,"main":"Clear","description":"clear sky","icon":"01n"}]},{"id":2523581,"dt":1615338518,"name":"Rosolini","coord":{"Lon":14.9478,"Lat":36.8242},"main":{"temp":11,"feels_like":9.94,"temp_min":11,"temp_max":11,"pressure":1013,"humidity":93},"visibility":10000,"wind":{"speed":1.54,"deg":170},"rain":null,"snow":null,"clouds":{"today":75},"weather":[{"id":803,"main":"Clouds","description":"broken clouds","icon":"04n"}]},{"id":2523650,"dt":1615338519,"name":"Ragusa","coord":{"Lon":14.7172,"Lat":36.9282},"main":{"temp":11,"feels_like":9.94,"temp_min":11,"temp_max":11,"pressure":1013,"humidity":93},"visibility":10000,"wind":{"speed":1.54,"deg":170},"rain":null,"snow":null,"clouds":{"today":75},"weather":[{"id":803,"main":"Clouds","description":"broken clouds","icon":"04n"}]}]}</msg>
<status status="PASS" starttime="20210309 23:12:59.234" endtime="20210309 23:12:59.234"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Response: ${RESPONSE.text}</arg>
</arguments>
<status status="PASS" starttime="20210309 23:12:59.234" endtime="20210309 23:12:59.235"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${RESPONSE.status_code}</arg>
<arg>${STATUS_CODE}</arg>
</arguments>
<msg timestamp="20210309 23:12:59.235" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20210309 23:12:59.235" endtime="20210309 23:12:59.235"></status>
</kw>
<status status="PASS" starttime="20210309 23:12:59.234" endtime="20210309 23:12:59.235"></status>
</kw>
<tags>
<tag>api_tests</tag>
<tag>weather_rectangle_zone</tag>
</tags>
<status status="PASS" starttime="20210309 23:12:58.798" endtime="20210309 23:12:59.235" critical="yes"></status>
</test>
<test id="s1-s1-s1-s1-s1-t6" name="Checking cities in circle">
<kw name="Given I start the session" library="weather_spec">
<kw name="Create Session" library="RequestsLibrary">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>${SESSION}</arg>
<arg>${HOST_BASE}</arg>
<arg>headers=${HEADER}</arg>
<arg>disable_warnings=True</arg>
</arguments>
<msg timestamp="20210309 23:12:59.237" level="INFO">Creating Session using : alias=weather, url=http://api.openweathermap.org/data/2.5, headers={'Content-Type': 'application/json'},                     cookies={}, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<msg timestamp="20210309 23:12:59.237" level="DEBUG">Creating session: weather</msg>
<status status="PASS" starttime="20210309 23:12:59.236" endtime="20210309 23:12:59.237"></status>
</kw>
<status status="PASS" starttime="20210309 23:12:59.236" endtime="20210309 23:12:59.237"></status>
</kw>
<kw name="When send a request about weather by cities in circle" library="weather_spec">
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>lat=${LATITUDE}</arg>
<arg>lon=${LONGITUDE}</arg>
<arg>cnt=${CNT}</arg>
<arg>appid=${API_KEY}</arg>
</arguments>
<assign>
<var>&amp;{params}</var>
</assign>
<msg timestamp="20210309 23:12:59.237" level="INFO">&amp;{params} = { lat=-23.5475 | lon=-46.6361 | cnt=10 | appid=e2f1d841cc16cff49a0aa18b531d71e0 }</msg>
<status status="PASS" starttime="20210309 23:12:59.237" endtime="20210309 23:12:59.237"></status>
</kw>
<kw name="Get On Session" library="RequestsLibrary">
<doc>Sends a GET request on a previously created HTTP Session.</doc>
<arguments>
<arg>${SESSION}</arg>
<arg>${WEATHER_ENDPOINT}</arg>
<arg>params=${params}</arg>
<arg>headers=${HEADER}</arg>
</arguments>
<assign>
<var>${RESPONSE}</var>
</assign>
<msg timestamp="20210309 23:12:59.705" level="INFO">GET Request : url=http://api.openweathermap.org/data/2.5/weather?lat=-23.5475&amp;lon=-46.6361&amp;cnt=10&amp;appid=e2f1d841cc16cff49a0aa18b531d71e0 
 path_url=/data/2.5/weather?lat=-23.5475&amp;lon=-46.6361&amp;cnt=10&amp;appid=e2f1d841cc16cff49a0aa18b531d71e0 
 headers={'User-Agent': 'python-requests/2.25.1', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive', 'Content-Type': 'application/json'} 
 body=None 
 </msg>
<msg timestamp="20210309 23:12:59.706" level="INFO">GET Response : url=http://api.openweathermap.org/data/2.5/weather?lat=-23.5475&amp;lon=-46.6361&amp;cnt=10&amp;appid=e2f1d841cc16cff49a0aa18b531d71e0 
 status=200, reason=OK 
 headers={'Server': 'openresty', 'Date': 'Wed, 10 Mar 2021 02:12:59 GMT', 'Content-Type': 'application/json; charset=utf-8', 'Content-Length': '481', 'Connection': 'keep-alive', 'X-Cache-Key': '/data/2.5/weather?cnt=10&amp;lat=-23.55&amp;lon=-46.64', 'Access-Control-Allow-Origin': '*', 'Access-Control-Allow-Credentials': 'true', 'Access-Control-Allow-Methods': 'GET, POST'} 
 body={"coord":{"lon":-46.6361,"lat":-23.5475},"weather":[{"id":803,"main":"Clouds","description":"broken clouds","icon":"04n"}],"base":"stations","main":{"temp":292.18,"feels_like":291.67,"temp_min":291.15,"temp_max":293.15,"pressure":1014,"humidity":73},"visibility":10000,"wind":{"speed":2.57,"deg":110},"clouds":{"all":75},"dt":1615341835,"sys":{"type":1,"id":8394,"country":"BR","sunrise":1615280753,"sunset":1615325304},"timezone":-10800,"id":3448439,"name":"São Paulo","cod":200} 
 </msg>
<msg timestamp="20210309 23:12:59.706" level="INFO">${RESPONSE} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20210309 23:12:59.238" endtime="20210309 23:12:59.706"></status>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${RESPONSE}</arg>
</arguments>
<msg timestamp="20210309 23:12:59.706" level="INFO">${RESPONSE} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20210309 23:12:59.706" endtime="20210309 23:12:59.706"></status>
</kw>
<status status="PASS" starttime="20210309 23:12:59.237" endtime="20210309 23:12:59.706"></status>
</kw>
<kw name="Then expect API response will be code" library="weather_spec">
<arguments>
<arg>200</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Response: ${RESPONSE.text}</arg>
</arguments>
<msg timestamp="20210309 23:12:59.707" level="INFO">Response: {"coord":{"lon":-46.6361,"lat":-23.5475},"weather":[{"id":803,"main":"Clouds","description":"broken clouds","icon":"04n"}],"base":"stations","main":{"temp":292.18,"feels_like":291.67,"temp_min":291.15,"temp_max":293.15,"pressure":1014,"humidity":73},"visibility":10000,"wind":{"speed":2.57,"deg":110},"clouds":{"all":75},"dt":1615341835,"sys":{"type":1,"id":8394,"country":"BR","sunrise":1615280753,"sunset":1615325304},"timezone":-10800,"id":3448439,"name":"São Paulo","cod":200}</msg>
<status status="PASS" starttime="20210309 23:12:59.707" endtime="20210309 23:12:59.707"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Response: ${RESPONSE.text}</arg>
</arguments>
<status status="PASS" starttime="20210309 23:12:59.707" endtime="20210309 23:12:59.707"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${RESPONSE.status_code}</arg>
<arg>${STATUS_CODE}</arg>
</arguments>
<msg timestamp="20210309 23:12:59.708" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20210309 23:12:59.707" endtime="20210309 23:12:59.708"></status>
</kw>
<status status="PASS" starttime="20210309 23:12:59.706" endtime="20210309 23:12:59.708"></status>
</kw>
<tags>
<tag>api_tests</tag>
<tag>cities_circle</tag>
</tags>
<status status="PASS" starttime="20210309 23:12:59.236" endtime="20210309 23:12:59.708" critical="yes"></status>
</test>
<status status="PASS" starttime="20210309 23:12:56.851" endtime="20210309 23:12:59.708"></status>
</suite>
<status status="PASS" starttime="20210309 23:12:56.850" endtime="20210309 23:12:59.710"></status>
</suite>
<status status="PASS" starttime="20210309 23:12:56.848" endtime="20210309 23:12:59.712"></status>
</suite>
<status status="PASS" starttime="20210309 23:12:56.847" endtime="20210309 23:12:59.714"></status>
</suite>
<status status="PASS" starttime="20210309 23:12:56.831" endtime="20210309 23:12:59.716"></status>
</suite>
<statistics>
<total>
<stat pass="6" fail="0">Critical Tests</stat>
<stat pass="6" fail="0">All Tests</stat>
</total>
<tag>
<stat pass="6" fail="0">api_tests</stat>
<stat pass="1" fail="0">cities_circle</stat>
<stat pass="1" fail="0">weather_by_city</stat>
<stat pass="1" fail="0">weather_by_id</stat>
<stat pass="1" fail="0">weather_long_lati</stat>
<stat pass="1" fail="0">weather_rectangle_zone</stat>
<stat pass="1" fail="0">weather_zipcod</stat>
</tag>
<suite>
<stat pass="6" fail="0" id="s1" name="Robot Automation Ui">Robot Automation Ui</stat>
<stat pass="6" fail="0" id="s1-s1" name="Features">Robot Automation Ui.Features</stat>
<stat pass="6" fail="0" id="s1-s1-s1" name="Specifications">Robot Automation Ui.Features.Specifications</stat>
<stat pass="6" fail="0" id="s1-s1-s1-s1" name="Api Application">Robot Automation Ui.Features.Specifications.Api Application</stat>
<stat pass="6" fail="0" id="s1-s1-s1-s1-s1" name="Weather Steps Spec">Robot Automation Ui.Features.Specifications.Api Application.Weather Steps Spec</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
